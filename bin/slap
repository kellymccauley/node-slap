#!/usr/bin/env node
'use strict';

var
    path = require('path')
  , u = require('util')
  , _ = require('lodash')
  , program = require('commander')
  , findup = require('findup-sync')
  , debug = require('debug')('bin/slap')

  , helper = require('./helper')
  , Slap = require('../slap')
  , slap
  , config
  , onFinishedCallback
  ;

config = {
  taskSetsFile: 'taskSets.js',
  taskSetsToRun: [],
  baseDir: baseDir
};



program
  .usage('[options] <taskSetName> [taskSetName ...]')
  .option('-f, --taskSets <file>', 'The path to an alternate taskSets.js.')
  .option('-t, --listTaskSets', 'Displays the list of task sets with descriptions.')
  .option('-T, --listAllTaskSets', 'Displays the list of all task sets.')
  .option('-v, --verbose [level]', 'Sets the verbosity level. 0: silent, 1: error, 2: warning, 3: notice, 4: info, 5: debug, 6: trace, 7+: internal debugging (To view internal debugging, you must also set the DEBUG="*" environment variable)')
  .option('--color [on|off]', 'Turns colored output on or off.')
  .option('--color-dark-bg', 'Colors output to be viewable on a dark background.')
  .option('--color-light-bg', 'Colors output to be viewable on a light background.')
;

program.parse(process.argv);

if (program.args.length > 0) {
  config.taskSetsToRun = config.taskSetsToRun.concat(program.args);
}

// -f, --taskSets <file>
//
if (program.taskSetsFile) {
  config.taskSetsFile = program.taskSetsFile;
}

// --color [on|off]
//
if (program.color) {
  config.useColors = helper.toBool(program.color);
}

// --color-dark-bg
//
if (program['color-dark-bg']) {
  config.outputBackgroundType = 'dark';
}

// --color-light-bg
//
if (program['color-light-bg']) {
  config.outputBackgroundType = 'light';
}

// -t, --listTaskSets
//
if (program.listTaskSets) {
  helper.printTaskSets(config, taskSets, false);
}

// -T, --listAllTaskSets
//
if (program.listAllTaskSets) {
  helper.printTaskSets(config, taskSets, true);
}

// -v, --verbose [level]
//
if (program.verbose) {
  config.reportLevel = parseInt(program.verbose);
}

onFinishedCallback = function(err, msg, exitCode) {
  var showHelp = false
    , noHurlError = false
  ;

  exitCode = exitCode || 0;

  if (typeof msg === 'number') {
    exitCode = msg;
    msg = null;
  }


  if (err) {
    if (_.isString(err)) {
      msg = err;

    } else if (err instanceof Error) {
      if (!msg) msg = err.message;
      if (err.exitCode) exitCode = err.exitCode
      if (err.showHelp) showHelp = true;
      if (err.noHurlError) noHurlError = true;

    }
  }


  if (msg) {
    console.log(msg);
  }

  if (err && !noHurlError) {
    throw err;
  }

  if (showHelp) {
    program.outputHelp();
  }

  if (exitCode) {
    process.exit(exitCode);
  } else {
    process.exit(0);
  }

}

slap = new Slap(config, onFinishedCallback);
slap.run();



// vim: set filetype=javascript :

